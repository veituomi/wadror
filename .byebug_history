BeermappingApi.places_in("tampere")
places
exit
user.rating_groups_by_average user.ratings.group_by(&:brewery)
user.rating_groups_by_average ratings.group_by(&:brewery)
user.favorite_brewery
best.brewery = FactoryGirl.create(:brewery2)
Beer.all.each { |beer| beer.brewery = bad_brewery }
Beer.all
beers.all
        best.ratings << best_rating
user.ratings << best_rating
best.brewery = FactoryGirl.create(:brewery2)
best.ratings
best
user.favorite_brewery
Beer.all.each { |beer| beer.brewery = bad_brewery }
bad_brewery
Beer.all
Beer
exit
exuser.rating_groups_by_average user.ratings.group_by(&:brewery)
user.rating_groups_by_average user.ratings.group_by(&:brewery)
user.rating_groups_by_average ratings.group_by(&:brewery)
user.favorite_brewery
;
exit
groups
exit
rating_groups_by_average g
g = ratings.group_by(&:brewery)
ratings
exit
rating_groups_by_average g
g = ratings.group_by(&:brewery)
ratings.group_by(&:brewery)
ratings
exit
rating_groups_by_average ratings.group_by(&:brewery)
exit
;
exit
rating_groups_by_average ratings.group_by(&:brewery)
reload
rating_groups_by_average ratings.group_by(&:brewery)
rating_groups_by_average
;
q
exit
ratings.group_by(&:brewery)
exit
ratings.group_by(&:name)
ratings.group_by(&:id)
ratings.first.beer
ratings.group_by(&:year)
ratings.group_by(&:brewery_id)
ratings.group_by(&:style)
ratings
ratings.first.beer
ratings.beer
ratings.beers.brewery
ratings.group_by(&:brewery_id)
ratings.group_by(brewery)
ratings.group_by(:brewery)
ratings.group_by(&:brewery)
ratings
exit
best
continue
@best_style
exit
g["IPA"].map { |m, s| m + s }
g["IPA"].inject { |m, s| m + s }
g["IPA"]
g.each do |key, array| puts array, key end
g.each do |key, array| puts array end
g.each do |key, array| puts key end
g
g = ratings.group_by(&:style)
ratings.group_by(&:style)
styles_by_rating_average
exit
groups
info program
help info
info instance_variables
infor instance_variables
user
styles_by_rating_average
skip
q
;
styles_by_rating_average
q
styles_by_rating_average
q
styles_by_rating_average
;
end
puts style_group.inject { |m, s| m + s } / style_group.length
for style_group in groups do
groups
q
bg.inject { |m, s| m + s } / bg.length
bg.inject { |m, s| m + s }
bg = group["Lager"].map { |r| r.score }
group["Lager"].map { |r| r.score }
group["Lager"].map { |r| r.score }.map { |s| puts s }
group["Lager"].map { |r| r.score }.inject { |s| puts s }
group["Lager"].map { |r| r.score }.inject { |s| s }
group["Lager"].map { |r| r.score }.average
group["Lager"].map { |r| r.score }
group.each { |g| g.map { |r| r.score } }
group.each.map { |r| r.score }
group["Lager"].map { |r| r.score }
group["Lager"].map { |m, r| m + r.score }
group["Lager"].map { |r| puts r.score }
group["Lager"].map { |r| puts r }
group["Lager"].inject { |r| puts r }
bg = group["Lager"].inject { |r| puts r }
bg = group["Lager"].inject { |r| puts r.score }
bg = group["Lager"].inject { |r| puts r }
bg = group["Lager"].inject { |r| r }
bg = group["Lager"].inject { |r| r.score }
q
bg = group["Lager"].inject { |r| r.score }
group["Lager"].inject { |m, score| puts score.score }
group["Lager"].inject { |m, score| puts score }
group["Lager"].inject { |m, score| puts s }
group["Lager"].inject { |m, score| puts m }
group["Lager"].inject { |m, score| m }
group["Lager"].inject { |m, score| m + score }
group["Lager"].inject { |m, score| m + s }
group["Lager"].inject { |m, s.score| m + s }
group["Lager"].inject { |m, s.score| m + s.score }
group["Lager"].inject { |m, s| m + s.score }
group["Lager"].inject { |m, s| m.score + s.score }
group["Lager"].inject { |m, s| m + s.score }
group["Lager"].inject { |m, s| puts m + s.score }
group.each { |s| s.each { |a| puts a.score } }
group.each { |s| s.each { |a| puts a } }
group["Lager"].each { |s| puts s.score }
group.each { |s| s.inject { |m, a| puts a, m } }
group.each { |s| s.inject { |m, a| puts a } }
group.each { |s| s.inject { |m, a| puts a.score } }
group.each { |s| s.inject { |m, s| puts m.score } }
group.each { |s| s.inject { |m, s| puts score } }
group.each { |s| s.inject { |m, s| puts s.score } }
group.each { |s| s.inject { |m, s| puts s:score } }
group.each { |s| s.inject { |m, s| puts s.score } }
group.each { |s| s.inject { |m, s| puts s } }
group.each { |s| s.inject { |m, s| puts s.score } }
group.each { |s| s.inject { |m, s| m + s } }
group.inject { |s| s.inject { |m, s| m + s }.to_s }
group.inject { |s| s.inject { |m, s| m + s } m }
group.inject { |s| s.inject { |m, s| m + s } }
group.inject { |s| s.inject { |m, s| m + s } m }
group.inject { |s| puts s }
group["IPA"]
group.at("IPA")
group.at(:IPA)
group.at(0)
group.at(1)
group.length
group
group[1]
group.second
group
group.last
group.first
group
group.each { |e| puts e.inject { |s, o| s + o } }
group.each { |e| puts e.type_of }
group.each { |e| puts e.type }
group.each { |e| puts e }
group
group.each { |e| e.inject { |r| puts r } }
group.each { |e| e.inject { |ratings| puts ratings } }
group.each { |e| e.inject { |rating| puts rating } }
group.each { |e| e.inject { |s| puts s } }
group.each { |e| e.map { |s| puts s } }
group.each { |e| puts e.score }
group.each { |e| puts e }
group.each { |e| put se }
group.each { |e| e.inject { } }
group.each { |e| e.inject { |sum| puts sum } }
group.each { |e| e.inject { |sum, e.score| puts e.score } }
group.each { |e| e.inject { |sum, e.score| puts score } }
group.each { |e| e.inject { |sum, score| puts score } }
group.each { |e| e.inject { |sum, a| puts a } }
group.each { |e| e.inject { |sum, a| sum + a.score } }
group.each { |e| e.inject { |sum, a| sum + a } }
group.each { |e| e.map }
group.each { |e| e.sum }
group.each { |e| e.average }
group
q
step
next
skip
goto next
step
group.each { |r| puts r.sum(:score) }
group.each { |r| puts r.sum(score) }
group.each { |r| puts r.score.sum }
group.each { |r| puts r.sum }
group.each { |r| r.sum }
group.each { |r| r.average }
group
group.average
group
q
ratings.group_by(&:style)
ratings.group_by(&:style).average(score)
ratings.group_by(&:style).average(&:score)
ratings.group_by(&:style).average(:score)
ratings.group_by(&:style)
ratings.group_by(&.style)
ratings.group_by(style)
ratings.average(:score)
ratings
ratings.each { |r| style_ratings[r.style] << r.score }
ratings.each { |r| style_ratings[r.style.to_s] << r.score }
continue
c
style_ratings
step
style_ratings
q
next
ratings.each { |r| style_ratings[r.style] << r.score }
q
style_ratings
q
user.ratings.each { |r| puts r.style + " {#1}", r.score }
user.ratings.each { |r| puts r.style + " {1}", r.score }
user.ratings.each { |r| puts r.style + " " + r.score }
user.ratings.each { |r| puts r.style + r.score }
user.ratings.each { |r| puts r.style }
user.ratings.each { |r| r.style }
user.ratings.each { |r| style }
user.ratings
user.ratings.group(:style)
q
user.ratings.group(:style)
user.ratings.group(style)
user.ratings
user.favorite_style
q
ratings.first.style
_.beer
ratings.first
ratings.collect { beers.style }
ratings.collect { beer.style }
ratings
q
